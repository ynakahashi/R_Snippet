coef(glm(y ~ x, d, family = binomial("logit")))
get_eta <- function(b) {
eta <- X %*% b
return(eta)
}
get_mu <- function(b) {
mu <- exp(X %*% b)
return(mu)
}
get_var <- get_mu
get_z <- function(b) {
z <- get_eta(b) + (d$y - get_mu(b)) / get_mu(b)
return(z)
}
get_W <- function(b) {
w <- get_mu(b)^2 / get_var(b)
return(w)
}
set.seed(123)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(1, 0.5)
eta <- x %*% b
d <- data.frame(
y = rpois(n, eta),
x = x[, -1])
iteration <- 0
b_old <- c(2, 0.3)
threshold <- 1e-06
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
if (iteration > 100) break
}
coef(glm(y ~ x, d, family = poisson("log")))
coef(glm(y ~ x, d, family = poisson("log")))
set.seed(123)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(2, 0.5)
eta <- x %*% b
d <- data.frame(
y = rpois(n, eta),
x = x[, -1])
iteration <- 0
b_old <- c(2, 0.3)
threshold <- 1e-06
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
if (iteration > 100) break
}
coef(glm(y ~ x, d, family = poisson("log")))
set.seed(123)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(2, 0.5)
lam <- exp(x %*% b)
d <- data.frame(
y = rpois(n, lam),
x = x[, -1])
iteration <- 0
b_old <- c(2, 0.3)
threshold <- 1e-06
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
if (iteration > 100) break
}
coef(glm(y ~ x, d, family = poisson("log")))
set.seed(123)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(1, 0.5)
lam <- exp(x %*% b)
d <- data.frame(
y = rpois(n, lam),
x = x[, -1])
iteration <- 0
b_old <- c(2, 0.3)
threshold <- 1e-06
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
if (iteration > 100) break
}
coef(glm(y ~ x, d, family = poisson("log")))
get_eta <- function(b) {
eta <- X %*% b
return(eta)
}
get_mu <- function(b) {
mu <- exp(X %*% b) / (1 + exp(X %*% b))
return(mu)
}
get_var <- function(b) {
var <- get_mu(b) * (1 - get_mu(b))
return(var)
}
get_z <- function(b) {
p <- get_mu(b)
z <- get_eta(b) + (d$y - p) / (1/p + 1/(1-p))
return(z)
}
get_W <- function(b) {
t <- get_mu(b) * (1 - get_mu(b))
w <- t^2 / get_var(b)
return(w)
}
get_eta <- function(b) {
eta <- X %*% b
return(eta)
}
get_mu <- function(b) {
mu <- exp(X %*% b) / (1 + exp(X %*% b))
return(mu)
}
get_var <- function(b) {
var <- get_mu(b) * (1 - get_mu(b))
return(var)
}
get_z <- function(b) {
p <- get_mu(b)
z <- get_eta(b) + (d$y - p) / (1/p + 1/(1-p))
return(z)
}
get_W <- function(b) {
t <- get_mu(b) * (1 - get_mu(b))
w <- t^2 / get_var(b)
return(w)
}
set.seed(123)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(1, 0.5)
eta <- x %*% b
p <- 1/(1 + exp(-eta))
d <- data.frame(
y = rbinom(n, 1, p),
x = x[, -1])
## Check
glm(y ~ x, d, family = binomial("logit"))$coef
x
set.seed(123)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(1, 0.5)
eta <- x %*% b
p <- exp(eta)/(1 + exp(eta))
d <- data.frame(
y = rbinom(n, 1, p),
x = x[, -1])
## Check
glm(y ~ x, d, family = binomial("logit"))$coef
eta
d
head(d)
iteration <- 0
b_old <- c(1, 0.38)
threshold <- 1e-08
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
if (iteration %% 100 == 0) {
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
}
if (iteration > 500) break
}
coef(glm(y ~ x, d, family = binomial("logit")))
iteration <- 0
b_old <- c(1, 0.38)
threshold <- 1e-08
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
if (iteration %% 100 == 0) {
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
}
if (iteration > 500) break
}
coef(glm(y ~ x, d, family = binomial("logit")))
set.seed(1234)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(1, 0.5)
eta <- x %*% b
p <- exp(eta)/(1 + exp(eta))
d <- data.frame(
y = rbinom(n, 1, p),
x = x[, -1])
## Check
# glm(y ~ x, d, family = binomial("logit"))$coef
iteration <- 0
b_old <- c(1, 0.38)
threshold <- 1e-08
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
if (iteration %% 100 == 0) {
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
}
if (iteration > 500) break
}
coef(glm(y ~ x, d, family = binomial("logit")))
iteration <- 0
b_old <- c(2, 0.3)
threshold <- 1e-08
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
if (iteration %% 100 == 0) {
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
}
if (iteration > 500) break
}
coef(glm(y ~ x, d, family = binomial("logit")))
set.seed(1234)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(1, 0.5)
eta <- x %*% b
p <- exp(eta)/(1 + exp(eta))
d <- data.frame(
y = rbinom(n, 1, p),
x = x[, -1])
## Check
# glm(y ~ x, d, family = binomial("logit"))$coef
set.seed(123)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(1, 0.5)
eta <- x %*% b
p <- exp(eta)/(1 + exp(eta))
d <- data.frame(
y = rbinom(n, 1, p),
x = x[, -1])
## Check
# glm(y ~ x, d, family = binomial("logit"))$coef
iteration <- 0
b_old <- c(2, 0.3)
threshold <- 1e-08
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
if (iteration %% 100 == 0) {
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
}
if (iteration > 500) break
}
coef(glm(y ~ x, d, family = binomial("logit")))
set.seed(234)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(1, 0.5)
eta <- x %*% b
p <- exp(eta)/(1 + exp(eta))
d <- data.frame(
y = rbinom(n, 1, p),
x = x[, -1])
## Check
# glm(y ~ x, d, family = binomial("logit"))$coef
iteration <- 0
b_old <- c(2, 0.3)
threshold <- 1e-08
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
if (iteration %% 100 == 0) {
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
}
if (iteration > 500) break
}
coef(glm(y ~ x, d, family = binomial("logit")))
set.seed(789)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(1, 0.5)
eta <- x %*% b
p <- exp(eta)/(1 + exp(eta))
d <- data.frame(
y = rbinom(n, 1, p),
x = x[, -1])
## Check
# glm(y ~ x, d, family = binomial("logit"))$coef
iteration <- 0
b_old <- c(2, 0.3)
threshold <- 1e-08
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
if (iteration %% 100 == 0) {
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
}
if (iteration > 500) break
}
coef(glm(y ~ x, d, family = binomial("logit")))
y
y
rbinom(n, 1, p)
d
set.seed(789)
n <- 100
x <- cbind(rep(1, n), runif(n, -1, 1))
b <- c(1, 0.5)
eta <- x %*% b
p <- exp(eta)/(1 + exp(eta))
d <- data.frame(
y = rbinom(n, 1, p),
x = x[, -1])
## Check
# glm(y ~ x, d, family = binomial("logit"))$coef
d
head(d)
iteration <- 0
b_old <- c(2, 0.3)
threshold <- 1e-08
diff <- 1
X <- cbind(rep(1, n), d[, -1])
n <- nrow(d)
W <- matrix(0, n, n)
while (diff > threshold) {
z <- get_z(b_old)
w <- get_W(b_old)
diag(W) <- w
xwx <- t(X) %*% W %*% X
xwz <- t(X) %*% W %*% z
b_new <- solve(xwx) %*% xwz
diff  <- sum(abs(b_old - b_new))
b_old <- b_new
iteration <- iteration + 1
# cat(sprintf("Iterations: %i \n", iteration))
if (iteration %% 100 == 0) {
cat(sprintf("Iterations: %i, b_New_1: %1.8f, b_New_2: %1.8f \n",
iteration, b_new[1], b_new[2]))
}
if (iteration > 500) break
}
coef(glm(y ~ x, d, family = binomial("logit")))
b_new
coef(glm(y ~ x, d, family = binomial("logit")))
library(tensorflow)
tfp <- import("tensorflow_probability")
install_tensorflow(
extra_packages = c("keras", "tensorflow-hub", "tensorflow-probability"),
version = "1.12"
)
tfp <- import("tensorflow_probability")
tfd <- tfp$distributions
tfp <- import("tensorflow_probability")
tfd <- tfp$distributions
n <- tfd$Normal(loc = 0, scale = 1)
n$sample(6L)
library(keras)
use_implementation("tensorflow")
library(tensorflow)
tfe_enable_eager_execution(device_policy = "silent")
n <- tfd$Normal(loc = 0, scale = 1)
n
n$sample
n$sample(6L)
n$sample(6L)
n$log_prob(c(-1, 0, 1))
b <- tfd$Bernoulli(0.9)
b$sample(10L)
b$log_prob(c(0,1,0,0))
